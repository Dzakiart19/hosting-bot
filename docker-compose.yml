version: '3.8'

services:
  # 1. Reverse Proxy and SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: panelhost_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/letsencrypt:/etc/letsencrypt
    networks:
      - panelnet
    depends_on:
      - api
      - web
      - grafana
    environment:
      - DOMAIN=${DOMAIN}
    command: /bin/sh -c "envsubst < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  # 2. Backend API
  api:
    build:
      context: ./api
    container_name: panelhost_api
    restart: unless-stopped
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      - postgres
      - redis
    networks:
      - panelnet
    expose:
      - "8000"

  # 3. Frontend Web App
  web:
    build:
      context: ./web
    container_name: panelhost_web
    restart: unless-stopped
    env_file: .env
    networks:
      - panelnet
    expose:
      - "3000"

  # 4. Telegram Bot
  bot:
    build:
      context: ./bot
    container_name: panelhost_bot
    restart: unless-stopped
    env_file: .env
    depends_on:
      - api
      - redis
    networks:
      - panelnet

  # 5. Deployer Worker
  deployer:
    build:
      context: ./deployer
    container_name: panelhost_deployer
    restart: unless-stopped
    env_file: .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - redis
      - minio
      - clamav
    networks:
      - panelnet

  # 6. Database
  postgres:
    image: postgres:15-alpine
    container_name: panelhost_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=Asia/Jakarta
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - panelnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 7. In-Memory Store
  redis:
    image: redis:7-alpine
    container_name: panelhost_redis
    restart: unless-stopped
    networks:
      - panelnet

  # 8. Object Storage
  minio:
    image: minio/minio:latest
    container_name: panelhost_minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - panelnet
    ports:
      - "${MINIO_PORT}:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"

  # 9. Antivirus Scanner
  clamav:
    image: clamav/clamav:latest
    container_name: panelhost_clamav
    restart: unless-stopped
    networks:
      - panelnet

  # 10. Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: panelhost_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    networks:
      - panelnet
    expose:
      - "9090"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: panelhost_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - panelnet
    expose:
      - "8080"

  grafana:
    image: grafana/grafana:10.1.5
    container_name: panelhost_grafana
    restart: unless-stopped
    env_file: .env
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - panelnet
    expose:
      - "3000" # Internal port, will be accessed via nginx subdomain

networks:
  panelnet:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  grafana_data:
